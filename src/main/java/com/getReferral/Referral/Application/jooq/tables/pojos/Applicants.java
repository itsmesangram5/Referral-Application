/*
 * This file is generated by jOOQ.
 */
package com.getReferral.Referral.Application.jooq.tables.pojos;


import com.getReferral.Referral.Application.jooq.tables.interfaces.IApplicants;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Applicants implements IApplicants {

    private static final long serialVersionUID = 1L;

    private Integer applicantId;
    private Integer userId;

    public Applicants() {}

    public Applicants(IApplicants value) {
        this.applicantId = value.getApplicantId();
        this.userId = value.getUserId();
    }

    public Applicants(
        Integer applicantId,
        Integer userId
    ) {
        this.applicantId = applicantId;
        this.userId = userId;
    }

    /**
     * Getter for <code>referral_db.applicants.applicant_id</code>.
     */
    @Override
    public Integer getApplicantId() {
        return this.applicantId;
    }

    /**
     * Setter for <code>referral_db.applicants.applicant_id</code>.
     */
    @Override
    public void setApplicantId(Integer applicantId) {
        this.applicantId = applicantId;
    }

    /**
     * Getter for <code>referral_db.applicants.user_id</code>.
     */
    @Override
    public Integer getUserId() {
        return this.userId;
    }

    /**
     * Setter for <code>referral_db.applicants.user_id</code>.
     */
    @Override
    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        final Applicants other = (Applicants) obj;
        if (this.applicantId == null) {
            if (other.applicantId != null)
                return false;
        }
        else if (!this.applicantId.equals(other.applicantId))
            return false;
        if (this.userId == null) {
            if (other.userId != null)
                return false;
        }
        else if (!this.userId.equals(other.userId))
            return false;
        return true;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((this.applicantId == null) ? 0 : this.applicantId.hashCode());
        result = prime * result + ((this.userId == null) ? 0 : this.userId.hashCode());
        return result;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Applicants (");

        sb.append(applicantId);
        sb.append(", ").append(userId);

        sb.append(")");
        return sb.toString();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IApplicants from) {
        setApplicantId(from.getApplicantId());
        setUserId(from.getUserId());
    }

    @Override
    public <E extends IApplicants> E into(E into) {
        into.from(this);
        return into;
    }
}
