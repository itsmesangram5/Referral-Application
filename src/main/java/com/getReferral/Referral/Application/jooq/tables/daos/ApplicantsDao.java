/*
 * This file is generated by jOOQ.
 */
package com.getReferral.Referral.Application.jooq.tables.daos;


import com.getReferral.Referral.Application.jooq.tables.Applicants;
import com.getReferral.Referral.Application.jooq.tables.records.ApplicantsRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
@Repository
public class ApplicantsDao extends DAOImpl<ApplicantsRecord, com.getReferral.Referral.Application.jooq.tables.pojos.Applicants, Integer> {

    /**
     * Create a new ApplicantsDao without any configuration
     */
    public ApplicantsDao() {
        super(Applicants.APPLICANTS, com.getReferral.Referral.Application.jooq.tables.pojos.Applicants.class);
    }

    /**
     * Create a new ApplicantsDao with an attached configuration
     */
    @Autowired
    public ApplicantsDao(Configuration configuration) {
        super(Applicants.APPLICANTS, com.getReferral.Referral.Application.jooq.tables.pojos.Applicants.class, configuration);
    }

    @Override
    public Integer getId(com.getReferral.Referral.Application.jooq.tables.pojos.Applicants object) {
        return object.getApplicantId();
    }

    /**
     * Fetch records that have <code>applicant_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchRangeOfApplicantId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Applicants.APPLICANTS.APPLICANT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>applicant_id IN (values)</code>
     */
    public List<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchByApplicantId(Integer... values) {
        return fetch(Applicants.APPLICANTS.APPLICANT_ID, values);
    }

    /**
     * Fetch a unique record that has <code>applicant_id = value</code>
     */
    public com.getReferral.Referral.Application.jooq.tables.pojos.Applicants fetchOneByApplicantId(Integer value) {
        return fetchOne(Applicants.APPLICANTS.APPLICANT_ID, value);
    }

    /**
     * Fetch a unique record that has <code>applicant_id = value</code>
     */
    public Optional<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchOptionalByApplicantId(Integer value) {
        return fetchOptional(Applicants.APPLICANTS.APPLICANT_ID, value);
    }

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchRangeOfUserId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Applicants.APPLICANTS.USER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    public List<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchByUserId(Integer... values) {
        return fetch(Applicants.APPLICANTS.USER_ID, values);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public com.getReferral.Referral.Application.jooq.tables.pojos.Applicants fetchOneByUserId(Integer value) {
        return fetchOne(Applicants.APPLICANTS.USER_ID, value);
    }

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    public Optional<com.getReferral.Referral.Application.jooq.tables.pojos.Applicants> fetchOptionalByUserId(Integer value) {
        return fetchOptional(Applicants.APPLICANTS.USER_ID, value);
    }
}
