/*
 * This file is generated by jOOQ.
 */
package com.getReferral.Referral.Application.jooq.tables;


import com.getReferral.Referral.Application.jooq.Indexes;
import com.getReferral.Referral.Application.jooq.Keys;
import com.getReferral.Referral.Application.jooq.ReferralDb;
import com.getReferral.Referral.Application.jooq.tables.Applicants.ApplicantsPath;
import com.getReferral.Referral.Application.jooq.tables.ReferralApplications.ReferralApplicationsPath;
import com.getReferral.Referral.Application.jooq.tables.records.ResumesRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Resumes extends TableImpl<ResumesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>referral_db.resumes</code>
     */
    public static final Resumes RESUMES = new Resumes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ResumesRecord> getRecordType() {
        return ResumesRecord.class;
    }

    /**
     * The column <code>referral_db.resumes.resume_id</code>.
     */
    public final TableField<ResumesRecord, Integer> RESUME_ID = createField(DSL.name("resume_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>referral_db.resumes.applicant_id</code>.
     */
    public final TableField<ResumesRecord, Integer> APPLICANT_ID = createField(DSL.name("applicant_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>referral_db.resumes.resume_name</code>.
     */
    public final TableField<ResumesRecord, String> RESUME_NAME = createField(DSL.name("resume_name"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>referral_db.resumes.branch</code>.
     */
    public final TableField<ResumesRecord, String> BRANCH = createField(DSL.name("branch"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>referral_db.resumes.passout_yr</code>.
     */
    public final TableField<ResumesRecord, Integer> PASSOUT_YR = createField(DSL.name("passout_yr"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>referral_db.resumes.exp_duration</code>.
     */
    public final TableField<ResumesRecord, BigDecimal> EXP_DURATION = createField(DSL.name("exp_duration"), SQLDataType.DECIMAL(5, 2), this, "");

    private Resumes(Name alias, Table<ResumesRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Resumes(Name alias, Table<ResumesRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>referral_db.resumes</code> table reference
     */
    public Resumes(String alias) {
        this(DSL.name(alias), RESUMES);
    }

    /**
     * Create an aliased <code>referral_db.resumes</code> table reference
     */
    public Resumes(Name alias) {
        this(alias, RESUMES);
    }

    /**
     * Create a <code>referral_db.resumes</code> table reference
     */
    public Resumes() {
        this(DSL.name("resumes"), null);
    }

    public <O extends Record> Resumes(Table<O> path, ForeignKey<O, ResumesRecord> childPath, InverseForeignKey<O, ResumesRecord> parentPath) {
        super(path, childPath, parentPath, RESUMES);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class ResumesPath extends Resumes implements Path<ResumesRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> ResumesPath(Table<O> path, ForeignKey<O, ResumesRecord> childPath, InverseForeignKey<O, ResumesRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private ResumesPath(Name alias, Table<ResumesRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public ResumesPath as(String alias) {
            return new ResumesPath(DSL.name(alias), this);
        }

        @Override
        public ResumesPath as(Name alias) {
            return new ResumesPath(alias, this);
        }

        @Override
        public ResumesPath as(Table<?> alias) {
            return new ResumesPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : ReferralDb.REFERRAL_DB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.RESUMES_APPLICANT_ID);
    }

    @Override
    public Identity<ResumesRecord, Integer> getIdentity() {
        return (Identity<ResumesRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ResumesRecord> getPrimaryKey() {
        return Keys.KEY_RESUMES_PRIMARY;
    }

    @Override
    public List<ForeignKey<ResumesRecord, ?>> getReferences() {
        return Arrays.asList(Keys.RESUMES_IBFK_1);
    }

    private transient ApplicantsPath _applicants;

    /**
     * Get the implicit join path to the <code>referral_db.applicants</code>
     * table.
     */
    public ApplicantsPath applicants() {
        if (_applicants == null)
            _applicants = new ApplicantsPath(this, Keys.RESUMES_IBFK_1, null);

        return _applicants;
    }

    private transient ReferralApplicationsPath _referralApplications;

    /**
     * Get the implicit to-many join path to the
     * <code>referral_db.referral_applications</code> table
     */
    public ReferralApplicationsPath referralApplications() {
        if (_referralApplications == null)
            _referralApplications = new ReferralApplicationsPath(this, null, Keys.REFERRAL_APPLICATIONS_IBFK_4.getInverseKey());

        return _referralApplications;
    }

    @Override
    public Resumes as(String alias) {
        return new Resumes(DSL.name(alias), this);
    }

    @Override
    public Resumes as(Name alias) {
        return new Resumes(alias, this);
    }

    @Override
    public Resumes as(Table<?> alias) {
        return new Resumes(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Resumes rename(String name) {
        return new Resumes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resumes rename(Name name) {
        return new Resumes(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Resumes rename(Table<?> name) {
        return new Resumes(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes where(Condition condition) {
        return new Resumes(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resumes where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resumes where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resumes where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Resumes where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Resumes whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
