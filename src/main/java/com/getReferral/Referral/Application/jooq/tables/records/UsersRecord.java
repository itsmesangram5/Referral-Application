/*
 * This file is generated by jOOQ.
 */
package com.getReferral.Referral.Application.jooq.tables.records;


import com.getReferral.Referral.Application.jooq.tables.Users;
import com.getReferral.Referral.Application.jooq.tables.interfaces.IUsers;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class UsersRecord extends UpdatableRecordImpl<UsersRecord> implements IUsers {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>referral_db.users.user_id</code>.
     */
    @Override
    public void setUserId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>referral_db.users.user_id</code>.
     */
    @Override
    public Integer getUserId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>referral_db.users.name</code>.
     */
    @Override
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>referral_db.users.name</code>.
     */
    @Override
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>referral_db.users.email_id</code>.
     */
    @Override
    public void setEmailId(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>referral_db.users.email_id</code>.
     */
    @Override
    public String getEmailId() {
        return (String) get(2);
    }

    /**
     * Setter for <code>referral_db.users.phone</code>.
     */
    @Override
    public void setPhone(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>referral_db.users.phone</code>.
     */
    @Override
    public String getPhone() {
        return (String) get(3);
    }

    /**
     * Setter for <code>referral_db.users.password</code>.
     */
    @Override
    public void setPassword(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>referral_db.users.password</code>.
     */
    @Override
    public String getPassword() {
        return (String) get(4);
    }

    /**
     * Setter for <code>referral_db.users.role</code>.
     */
    @Override
    public void setRole(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>referral_db.users.role</code>.
     */
    @Override
    public String getRole() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IUsers from) {
        setUserId(from.getUserId());
        setName(from.getName());
        setEmailId(from.getEmailId());
        setPhone(from.getPhone());
        setPassword(from.getPassword());
        setRole(from.getRole());
        resetChangedOnNotNull();
    }

    @Override
    public <E extends IUsers> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UsersRecord
     */
    public UsersRecord() {
        super(Users.USERS);
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(Integer userId, String name, String emailId, String phone, String password, String role) {
        super(Users.USERS);

        setUserId(userId);
        setName(name);
        setEmailId(emailId);
        setPhone(phone);
        setPassword(password);
        setRole(role);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised UsersRecord
     */
    public UsersRecord(com.getReferral.Referral.Application.jooq.tables.pojos.Users value) {
        super(Users.USERS);

        if (value != null) {
            setUserId(value.getUserId());
            setName(value.getName());
            setEmailId(value.getEmailId());
            setPhone(value.getPhone());
            setPassword(value.getPassword());
            setRole(value.getRole());
            resetChangedOnNotNull();
        }
    }
}
